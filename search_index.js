var documenterSearchIndex = {"docs":
[{"location":"SearchEmployees/#Example.jl-Documentation-frgergergwergerg","page":"Example.jl Documentation frgergergwergerg","title":"Example.jl Documentation frgergergwergerg","text":"","category":"section"},{"location":"SearchEmployees/","page":"Example.jl Documentation frgergergwergerg","title":"Example.jl Documentation frgergergwergerg","text":"note: An optional title\nHere is something you should pay attention to.","category":"page"},{"location":"SearchEmployees/","page":"Example.jl Documentation frgergergwergerg","title":"Example.jl Documentation frgergergwergerg","text":"def test():\n    return False","category":"page"},{"location":"SearchEmployees/","page":"Example.jl Documentation frgergergwergerg","title":"Example.jl Documentation frgergergwergerg","text":"(Image: image)","category":"page"},{"location":"SearchEmployees/","page":"Example.jl Documentation frgergergwergerg","title":"Example.jl Documentation frgergergwergerg","text":"This is an external link to lucidchart","category":"page"},{"location":"Miscellaneous/#Miscellaneous","page":"General Info on miscellaneous components","title":"General Info on miscellaneous components","text":"","category":"section"},{"location":"Miscellaneous/","page":"General Info on miscellaneous components","title":"General Info on miscellaneous components","text":"Here we present general info on components that are used throughout the project. ","category":"page"},{"location":"Miscellaneous/#formDropdowns","page":"General Info on miscellaneous components","title":"Form Dropdowns","text":"","category":"section"},{"location":"Miscellaneous/","page":"General Info on miscellaneous components","title":"General Info on miscellaneous components","text":"PowerApps forms originally define all fields as regular text inputs, so we have to define our own method to implement dropdown functionality. ","category":"page"},{"location":"Miscellaneous/","page":"General Info on miscellaneous components","title":"General Info on miscellaneous components","text":"(Image: image)","category":"page"},{"location":"Miscellaneous/","page":"General Info on miscellaneous components","title":"General Info on miscellaneous components","text":"The image above is the EMR System Dropdown on the Add New Client Section. The process to add a new dropdown to these forms is as follows: ","category":"page"},{"location":"Miscellaneous/","page":"General Info on miscellaneous components","title":"General Info on miscellaneous components","text":"Select the desired DataCard on the form component and remove the Text Input element to change \nInsert the dropdown element into the datacard \nChange the Update property of the DataCard. For instance, for the dropdown in the image: ","category":"page"},{"location":"Miscellaneous/","page":"General Info on miscellaneous components","title":"General Info on miscellaneous components","text":"DropdownEMR.Selected.'EMR System'","category":"page"},{"location":"Miscellaneous/","page":"General Info on miscellaneous components","title":"General Info on miscellaneous components","text":"On the dropdown object: ","category":"page"},{"location":"Miscellaneous/","page":"General Info on miscellaneous components","title":"General Info on miscellaneous components","text":"The list of options is controlled by the items property, and it can be set by either a collection or a table. If the collection contains more than one column, the value to show can be chosen from the properties menu of the object. \nThe responsive features of the element are controlled on the Width, X, and Y properties: ","category":"page"},{"location":"Miscellaneous/","page":"General Info on miscellaneous components","title":"General Info on miscellaneous components","text":"Parent.Width - 60 //Width\nDataCardKey4.Y + DataCardKey4.Height + 5 //X","category":"page"},{"location":"Miscellaneous/#formMultiselect","page":"General Info on miscellaneous components","title":"Multiselect Dropdowns","text":"","category":"section"},{"location":"Miscellaneous/","page":"General Info on miscellaneous components","title":"General Info on miscellaneous components","text":"The general behavior of this component (referred as Combo Box in PowerApps Documentation) is the same as described in Form Dropdowns. However, there are a few differences, which are listed below:","category":"page"},{"location":"Miscellaneous/","page":"General Info on miscellaneous components","title":"General Info on miscellaneous components","text":"Search Feature:  If the IsSearchable property of the Combo Box is set to true, you must specify the searchable fields from the table that defines the object's items in the SearchFields property. In previous tests I found that setting more than one searchable field leads to delegation warnings in the application which could cause crashes or errors if one works with large data bases (of more than 2000 entries).\nDefault Items: In general, we set the default selected items of an object in the Default property, but in Combo Boxes it's necessary to work with the DefaultSelectedItems property, which requires a table or collection as an input:","category":"page"},{"location":"Miscellaneous/","page":"General Info on miscellaneous components","title":"General Info on miscellaneous components","text":"ForAll(Split(Parent.Default,\"|\") As ItemMentor,\nLookUp('OPT - Employees Informations',Name=ItemMentor.Value)\n)","category":"page"},{"location":"Miscellaneous/#formNewAdd","page":"General Info on miscellaneous components","title":"Update or Add new a Element on a form","text":"","category":"section"},{"location":"Miscellaneous/","page":"General Info on miscellaneous components","title":"General Info on miscellaneous components","text":"PowerApps forms can either add a new record or edit an existing one from a table by setting the Item and DefaultMode properties of the Form object. To control the desired behavior, we typically pass a context variable, which is either blank or of the record type, before navigating to the window containing the desired form. In the Client's Section, for example, we pass this context variable as blank to add a new client, and as ThisItem when accessing to an existing Client record. ","category":"page"},{"location":"Miscellaneous/","page":"General Info on miscellaneous components","title":"General Info on miscellaneous components","text":"//For entering a new record\nSet(\n    varDataEditCustomer, \n    Blank());\n\nNavigate(scrAddCustomer,ScreenTransition.Fade,{varDataEditCustomer:varDataEditCustomer});\n\n\n//For editing an exisiting one\nSet(\n    varDataEditCustomer, \n    ThisItem\n);\n\nNavigate(scrAddCustomer,ScreenTransition.Fade,{varDataEditCustomer:varDataEditCustomer});\n","category":"page"},{"location":"Miscellaneous/","page":"General Info on miscellaneous components","title":"General Info on miscellaneous components","text":"We then set the DefaultMode property of the form as: ","category":"page"},{"location":"Miscellaneous/","page":"General Info on miscellaneous components","title":"General Info on miscellaneous components","text":"If(IsBlank(varDataEditCustomer), FormMode.New, FormMode.Edit)","category":"page"},{"location":"Miscellaneous/","page":"General Info on miscellaneous components","title":"General Info on miscellaneous components","text":"And the Item property as:","category":"page"},{"location":"Miscellaneous/","page":"General Info on miscellaneous components","title":"General Info on miscellaneous components","text":"If(IsBlank(varDataEditCustomer), FormMode.New, FormMode.Edit)","category":"page"},{"location":"Miscellaneous/#formSubmit","page":"General Info on miscellaneous components","title":"Submit a form","text":"","category":"section"},{"location":"Miscellaneous/","page":"General Info on miscellaneous components","title":"General Info on miscellaneous components","text":"To validate and add or edit a record in a table, it is sufficient to use the SubmitForm functionality on a button, but this doesn't reset the form component or allow for further functionality after the form has been submitted. ","category":"page"},{"location":"Miscellaneous/","page":"General Info on miscellaneous components","title":"General Info on miscellaneous components","text":"We use the OnSuccess and OnFailure properties of the form object to define window's behavior after submission. For instance, in the Client's Section we simply reset the form and notify the user after a successful entry: ","category":"page"},{"location":"Miscellaneous/","page":"General Info on miscellaneous components","title":"General Info on miscellaneous components","text":"ResetForm(FormNewClient);\nNotify(\"Client Added to Database\", NotificationType.Success);\nBack();","category":"page"},{"location":"Miscellaneous/","page":"General Info on miscellaneous components","title":"General Info on miscellaneous components","text":"And in the case of failure: ","category":"page"},{"location":"Miscellaneous/","page":"General Info on miscellaneous components","title":"General Info on miscellaneous components","text":"Notify(\"An error has occurred\", NotificationType.Error);","category":"page"},{"location":"Miscellaneous/","page":"General Info on miscellaneous components","title":"General Info on miscellaneous components","text":"In our experience, failures can occur due to an invalid data type being entered in one of the fields, or because the application was left open for a long period without any activity, and in some instances it seems that errors occur simply because multiple users tried to entered information simultaneously, which we have also observed when using the Patch command to edit or add a record to a table. ","category":"page"},{"location":"Miscellaneous/#NavigationButtonms","page":"General Info on miscellaneous components","title":"Navigation bar Buttons","text":"","category":"section"},{"location":"Miscellaneous/","page":"General Info on miscellaneous components","title":"General Info on miscellaneous components","text":"(Image: image)","category":"page"},{"location":"Miscellaneous/","page":"General Info on miscellaneous components","title":"General Info on miscellaneous components","text":"A series of buttons at the top of the window can be found in the  Employee Profile and Administration sections. These buttons serve as navigation tools across different screens within a specific section. We use two different colors to indicate whether a section  is currently selected—RGBA(64, 92, 123, 1) for selected and RGBA(112, 143, 174, 1) for unselected—implemented through the Fill property of each button. Each button was manually added and calls a Navigate function. In certain cases, such as the Attachments section, they also pass context variables. ","category":"page"},{"location":"Miscellaneous/","page":"General Info on miscellaneous components","title":"General Info on miscellaneous components","text":"Navigate(scrAttachments,ScreenTransition.CoverRight,{UserRole:UserRole,varEmployeeDataRow:varEmployeeDataRow})\n","category":"page"},{"location":"CalendarScreen/#CalendarScreen","page":"Calendar","title":"Calendar","text":"","category":"section"},{"location":"CalendarScreen/","page":"Calendar","title":"Calendar","text":"Here, users can consult important dates such as Work Anniversaries, Birthdays, Holidays and Care One On Ones for current year. PowerApps performance can be compromised if we try to set up a multi-year calendar as items in collections become large, and the application turns laggy. ","category":"page"},{"location":"CalendarScreen/","page":"Calendar","title":"Calendar","text":"(Image: image)","category":"page"},{"location":"CalendarScreen/","page":"Calendar","title":"Calendar","text":"On the left we have a dropdown to select the type of events to display in the calendar, ","category":"page"},{"location":"CalendarScreen/","page":"Calendar","title":"Calendar","text":"The OnVisible property of the screen initializes all relevant variables required to make this calendar application work: ","category":"page"},{"location":"CalendarScreen/","page":"Calendar","title":"Calendar","text":"/*resets calendar view and date selection to today*/\nSet(_dateSelected, Today());\nSet(_firstDayOfMonth, DateAdd(Today(), 1 - Day(Today()), TimeUnit.Days));\nSet(_firstDayInView, DateAdd(_firstDayOfMonth, -(Weekday(_firstDayOfMonth) - 2 + 1), TimeUnit.Days));\nSet(_lastDayOfMonth, DateAdd(DateAdd(_firstDayOfMonth, 1, TimeUnit.Months), -1, TimeUnit.Days));\nClearCollect(\n    calendarEvents,\n    {}\n);","category":"page"},{"location":"CalendarScreen/","page":"Calendar","title":"Calendar","text":"We control the visibility of this screen using three main galleries, and a dropdown: ","category":"page"},{"location":"CalendarScreen/","page":"Calendar","title":"Calendar","text":"DropdownCalendarSelection: Items here are defined by user role, and the options are:  [       \"Anniversaries\",       \"Birthdays\",       \"Holidays\",       \"Care One on Ones\"   ]. The OnSelect property sets the calendar visibility when user selects an item","category":"page"},{"location":"CalendarScreen/","page":"Calendar","title":"Calendar","text":"//Template to fill calendar events\n ForAll(\n        Filter('OPT - Employees Informations','Employment Status'=\"Active\"),\n        If(\n            !IsBlank(ThisRecord.DOB),\n            Collect(\n                calendarEvents,\n                {\n                    Start: DateTimeValue(\n                        Text(\n                            Month(ThisRecord.DOB),\n                            \"00\"\n                        ) & \"-\" & Text(\n                            Day(ThisRecord.DOB),\n                            \"00\"\n                        ) & \"-\" & Text(\n                            Year(Today()),\n                            \"00\"\n                        )\n                    ),\n                    Location: \"CDMX\",\n                    Subject: \"Birthday of \" & ThisRecord.Name,\n                    Id: DateDiff(\n                        DateValue(\"1/1/1990\"),\n                        Now(),\n                        TimeUnit.Milliseconds\n                    )\n                }\n            )\n        )\n    )","category":"page"},{"location":"CalendarScreen/","page":"Calendar","title":"Calendar","text":"MonthDayGallery1: Items property contains numbers to generate 42 squares in the calendar, so it displays last days from previous month and first days of the nect when applicable.  Each element contains a sub gallery GalleryEvents","category":"page"},{"location":"CalendarScreen/#Miscellaneous-Elements","page":"Calendar","title":"Miscellaneous Elements","text":"","category":"section"},{"location":"ClientsScreens/#ClientsSection","page":"Client's Section","title":"Client's Section","text":"","category":"section"},{"location":"ClientsScreens/","page":"Client's Section","title":"Client's Section","text":"This screen allows to search and preview information of clients. The only filter condition here is the status of the contract which can be \"Active\", \"Prospect\" or \"Terminated\". One can also add a new record if deemed necessary.","category":"page"},{"location":"ClientsScreens/","page":"Client's Section","title":"Client's Section","text":"(Image: image)","category":"page"},{"location":"ClientsScreens/","page":"Client's Section","title":"Client's Section","text":"The data in the gallery (GalleryClients) is retrieved from the OPT - Customers Tables sharepoint list. The OnVisible property of the screen pulls the information into a collection: ","category":"page"},{"location":"ClientsScreens/","page":"Client's Section","title":"Client's Section","text":"ClearCollect(customersColl,'OPT - Customers Tables')","category":"page"},{"location":"ClientsScreens/","page":"Client's Section","title":"Client's Section","text":"This data is pulled, filtered and sorted on the Items property of the gallery: ","category":"page"},{"location":"ClientsScreens/","page":"Client's Section","title":"Client's Section","text":"If(!IsBlank(txtSearchClient.Text) ||!IsBlank(DropdownStatusFilter.Selected.Value),\n//then\nSort(Filter(\n    customersColl,\n    txtSearchClient.Text in Name,\n    If(!IsBlank(DropdownStatusFilter.Selected.Value),\n    'Service Status' = DropdownStatusFilter.Selected.Value, 'Service Status' <> Blank())\n),Name),\n//else\nSort(customersColl,Name\n))","category":"page"},{"location":"ClientsScreens/#addClient","page":"Client's Section","title":"Add New/Edit Client","text":"","category":"section"},{"location":"ClientsScreens/","page":"Client's Section","title":"Client's Section","text":"By pressing \"Add New Client\" or \"Edit\", the following code is executed: ","category":"page"},{"location":"ClientsScreens/","page":"Client's Section","title":"Client's Section","text":"\nSet(\n    varDataEditCustomer, \n    Blank()); // for New Client\n\nSet(\n    varDataEditCustomer, \n    ThisItem\n); // For a client item\n\nNavigate(scrAddCustomer,ScreenTransition.Fade,{varDataEditCustomer:varDataEditCustomer});\n","category":"page"},{"location":"ClientsScreens/","page":"Client's Section","title":"Client's Section","text":"the varDataEditCustomer context variable controls the info displayed on the FormNewClient element. ","category":"page"},{"location":"ClientsScreens/","page":"Client's Section","title":"Client's Section","text":"If we click on the \"Add New Client\" or \"Edit\" buttons this screen will be displayed: ","category":"page"},{"location":"ClientsScreens/","page":"Client's Section","title":"Client's Section","text":"(Image: image)","category":"page"},{"location":"ClientsScreens/","page":"Client's Section","title":"Client's Section","text":"General functionality of forms is described in the Miscellaneous section.","category":"page"},{"location":"ClientsScreens/#clientDetails","page":"Client's Section","title":"Client Details","text":"","category":"section"},{"location":"ClientsScreens/","page":"Client's Section","title":"Client's Section","text":"When navigating to this window we pass the following command: ","category":"page"},{"location":"ClientsScreens/","page":"Client's Section","title":"Client's Section","text":"Navigate(scrServices,ScreenTransition.Fade,{varCustomerDetails:ThisItem});","category":"page"},{"location":"ClientsScreens/","page":"Client's Section","title":"Client's Section","text":"This varCustomerDetails context variable contains all information stored for this client in the OPT - Customers Tables SharePoint list. ","category":"page"},{"location":"ClientsScreens/","page":"Client's Section","title":"Client's Section","text":"The Client Details screen has four different sections: ","category":"page"},{"location":"ClientsScreens/","page":"Client's Section","title":"Client's Section","text":"Client Info: The displayed info is pulled from the varCustomerDetails context variable. The \"Edit\" button navigates the user to the  Edit Client screen, and the \"Holiday Policy\" is referred as in the Holidays section of the administration module.\n(Image: image)\nContacts: Displays the information linked to a specific client from the OPT - Clients Contacts table. This section functions as a regular form element as described in Miscellaneous. \n(Image: image)\nServices: Displays the information linked to a specific client from the OPT - Client Services table. This section functions as a regular form element as described in Miscellaneous. \n(Image: image)\nEmployees: Displays the employees linked to a specific client and their services. This section is more complex than the previous ones as it involves three tables: OPT - Customers Tables, OPT - Client Services, and OPT - Employee Clients. \n(Image: image)\nThe table itself displays information by grouping the servicesEmployeeClientColl collection by service:   GroupBy(  Sort(servicesEmployeeClientColl,Service),  Service,  DATA  )\nThis collection is defined in the OnVisible property of the screen:","category":"page"},{"location":"ClientsScreens/","page":"Client's Section","title":"Client's Section","text":"Set(CustomerID, varCustomerDetails.UniqueCustomerID);\n//Pulls customerId from context variable\n\nUpdateContext({varCustomerDetails:LookUp(\n    'OPT - Customers Tables',UniqueCustomerID=CustomerID)}); \n//Pulls most  up to date information from customers table\n\nClearCollect(\n    ClientServicesColl,\n    Filter(\n        'OPT - Client Services',\n        UniqueCustomerID = varCustomerDetails.UniqueCustomerID,\n        'Service Status' = \"Active\"\n    )\n);//Retrieves Services linked to specific client\n\nClearCollect(\n    servicesEmployeeClientColl,\n    ForAll(\n        Filter(\n            'OPT - Employee Clients',\n            UniqueCustomerID = varCustomerDetails.UniqueCustomerID,\n            'Role Status'=\"Active\"\n        ),\n        If(\n            !IsBlank(\n                Filter(\n                    ClientServicesColl,\n                    ServiceID = ThisRecord.ServiceID\n                )\n            ),\n            ThisRecord\n        )\n    )\n) // Retrieves employees linked to that specific service/client","category":"page"},{"location":"ClientsScreens/#clientAddEmployee","page":"Client's Section","title":"Add Employees Screen","text":"","category":"section"},{"location":"ClientsScreens/","page":"Client's Section","title":"Client's Section","text":"Here one can add active employees in bulk to active services for the selected client. You can access the Add Employees Screen from the \"Add Employees\" button in the section above. This button executes a basic snippet to navigate to the screen and pass a context variable with client details: ","category":"page"},{"location":"ClientsScreens/","page":"Client's Section","title":"Client's Section","text":"Navigate(scrAddBulkEmployees,ScreenTransition.Fade,{varCustomerDetails:varCustomerDetails});","category":"page"},{"location":"ClientsScreens/","page":"Client's Section","title":"Client's Section","text":"(Image: image)","category":"page"},{"location":"ClientsScreens/","page":"Client's Section","title":"Client's Section","text":"The OnVisible property of the screen defines all variables that make the functionality of this screen: ","category":"page"},{"location":"ClientsScreens/","page":"Client's Section","title":"Client's Section","text":"ClearCollect(Employees, Filter('OPT - Employees Informations', 'Employment Status'=\"Active\")); \n//Active Employees\n\nClearCollect(ColEmployees, AddColumns(Employees, IsChoosen, false));\n//Creates a new collection from active employees, and it includes \nan additional column to store the state of the selection checkbox\n\nSet(varActiveServiceList,\n    Filter(\n        'OPT - Client Services',\n        UniqueCustomerID = varCustomerDetails.UniqueCustomerID, \n        'Service Status' = \"Active\"\n    )\n);\n//Active services from current client\n \n\nClearCollect(NonSuccessfulUsers, {Name:\"\"})\n//Collection that stores employees that were not successfully added.","category":"page"},{"location":"ClientsScreens/","page":"Client's Section","title":"Client's Section","text":"note: Note\nEmployees can only be removed from a client, or change status by accessing their individual profiles. ","category":"page"},{"location":"ClientsScreens/","page":"Client's Section","title":"Client's Section","text":"The CheckboxSelectedEmployee within the GalleryEmployees object controls which users will be assigned to the selected service. Using the OnCheck and OnUncheck properties: ","category":"page"},{"location":"ClientsScreens/","page":"Client's Section","title":"Client's Section","text":"Patch(ColEmployees,ThisItem,{IsChoosen:true}) //OnCheck property\n\nPatch(ColEmployees,ThisItem,{IsChoosen:false}) //OnUncheck property","category":"page"},{"location":"ClientsScreens/","page":"Client's Section","title":"Client's Section","text":"Finally, the add button validates the fields, and patches the information to the  'OPT - Employee Clients' table. ","category":"page"},{"location":"ClientsScreens/","page":"Client's Section","title":"Client's Section","text":"//Validate inputs\nIf(\n    IsBlank(DropdownActiveServices.Selected.Service) || IsBlank(DatePickerService.SelectedDate),\n    Notify(\n        \"Please select both a Service and a Start Date\",\n        NotificationType.Error\n    ),\n    ClearCollect(\n        NonSuccessfulUsers,\n        {Name: \"\"}\n    );\n    Clear(tempMail);\n    \n    ForAll(\n        ColEmployees,\n        If(\n            ThisRecord.IsChoosen,\n    //Then\n            Collect(tempMail,{Mail:ThisRecord.'Email Address'});\n            If(\n                IsEmpty(\n                    Filter(\n                        'OPT - Employee Clients',\n                        'Email Address' = Last(tempMail).Mail,\n                        UniqueCustomerID = varCustomerDetails.UniqueCustomerID,\n                        ServiceID=DropdownActiveServices.Selected.ServiceID\n                       \n                    )\n                ), //PowerApps doesn't allow to set variables within a for loop,\n                // so I have to use a collection and use the last item as the value of my variable\n            //THEN\n                Patch(\n                    'OPT - Employee Clients',\n                    Defaults('OPT - Employee Clients'),\n                    {\n                        Client: varCustomerDetails.Name,\n                        UniqueCustomerID: varCustomerDetails.UniqueCustomerID,\n                        Service: DropdownActiveServices.Selected.Service,\n                        ServiceID: DropdownActiveServices.Selected.ServiceID,\n                        'Role Status': \"Active\",\n                        'Start Date': DatePickerService.SelectedDate,\n                        Name: ThisRecord.Name,\n                        'Email Address': ThisRecord.'Email Address',\n                        'User System ID': ThisRecord.'User System ID'\n                    }\n                );, //I patch the employee if it's not yet assigned to this client/service\n                //ELSE\n                Patch(\n                    NonSuccessfulUsers,\n                    Defaults(NonSuccessfulUsers),\n                    {Name: ThisRecord.Name}\n                );\n            );\n            \n        );\n    );\n    Reset(DropdownActiveServices);\n    Notify(\n        \"Records Added to Database\",\n        NotificationType.Success\n    );\n    UpdateIf(\n        ColEmployees,\n        true,\n        {IsChoosen: false}\n    );\n    \n)//End validation If\n","category":"page"},{"location":"ClientsScreens/","page":"Client's Section","title":"Client's Section","text":"The function also triggers the message below when some employees failed to patch:","category":"page"},{"location":"ClientsScreens/","page":"Client's Section","title":"Client's Section","text":"(Image: image)","category":"page"},{"location":"ClientsScreens/","page":"Client's Section","title":"Client's Section","text":"The label LabelWarningExisitingEmployee contaning this message is hidden when the NonSuccessfulUsers collection is empty: ","category":"page"},{"location":"ClientsScreens/","page":"Client's Section","title":"Client's Section","text":"//Code at the OnVisible property of the label\nIsBlank(LookUp(NonSuccessfulUsers, !IsBlank(Name)))","category":"page"},{"location":"EmployeeProfileScreens/#EmployeeProfileScr","page":"Employee Profile","title":"Employee Profile","text":"","category":"section"},{"location":"EmployeeProfileScreens/","page":"Employee Profile","title":"Employee Profile","text":"One can access their own employee profile screen from the Main Screen by clicking the Profile button. Dev, Administrators, Integration, and S&E Specialists users have different levels of access to other users' profiles through the magnifying glass icon on the top-right corner or by clicking on the Employees button on the Main Screen.","category":"page"},{"location":"EmployeeProfileScreens/","page":"Employee Profile","title":"Employee Profile","text":"Either way, the buttons will set the varEmployeeDataRow which contains all information about the selected user. This variable is of special interest as it controls all the subsequent functionalities: ","category":"page"},{"location":"EmployeeProfileScreens/","page":"Employee Profile","title":"Employee Profile","text":"Set(\n    varEmployeeDataRow,\n     LookUp(\n            'OPT - Employees Informations',\n            'Email Address' = userMail\n        )\n);\n","category":"page"},{"location":"EmployeeProfileScreens/","page":"Employee Profile","title":"Employee Profile","text":"The varSelectedPerson context and global variables are also set when loading the employee profile. Some functionalities make use of them, but they will be eventually deprecated. They were part of the initial approach before this project grew significantl and before the creation of the the 'OPT - Employees Informations' table. Proceed with caution if you need to manipulate anything involving them:","category":"page"},{"location":"EmployeeProfileScreens/","page":"Employee Profile","title":"Employee Profile","text":"UpdateContext(\n        {\n            varSelectedPerson: {\n                Mail: varEmployeeDataRow.'Email Address',\n                Id: varEmployeeDataRow.'User System ID',\n                DisplayName: varEmployeeDataRow.Name\n            }\n        }\n    );\n    Set(\n        varSelectedPerson,\n        varSelectedPerson\n    );","category":"page"},{"location":"EmployeeProfileScreens/#initialLoad","page":"Employee Profile","title":"Initial Load","text":"","category":"section"},{"location":"EmployeeProfileScreens/","page":"Employee Profile","title":"Employee Profile","text":"When accessing this screen, a series of background processes are triggered by the OnVisible property of the window. In this section I will explain some pieces of this code which are not used by other areas. I will refer to the remaining snippets in their respective sections.","category":"page"},{"location":"EmployeeProfileScreens/#initialLoadDefs","page":"Employee Profile","title":"Variable definitions","text":"","category":"section"},{"location":"EmployeeProfileScreens/","page":"Employee Profile","title":"Employee Profile","text":"The first variable we define is the context type resetCanHome, which resets the screen's scrolling state. This variable is applied to the Visible property of the CanvasProfileScrollingCard object, and it is triggered when the screen state changes between hidden and visible. ","category":"page"},{"location":"EmployeeProfileScreens/","page":"Employee Profile","title":"Employee Profile","text":"UpdateContext({resetCanHome:false}); //Resets scrolling ","category":"page"},{"location":"EmployeeProfileScreens/","page":"Employee Profile","title":"Employee Profile","text":"The varShowEmployeeDetails controls the Visible property of the AdditionalEmployeeInfo container which displays further data about the employee. ","category":"page"},{"location":"EmployeeProfileScreens/","page":"Employee Profile","title":"Employee Profile","text":"Set(\n        varShowEmployeeDetails,\n        false\n    );","category":"page"},{"location":"EmployeeProfileScreens/#Navigation-Buttons","page":"Employee Profile","title":"Navigation Buttons","text":"","category":"section"},{"location":"EmployeeProfileScreens/","page":"Employee Profile","title":"Employee Profile","text":"(Image: image)","category":"page"},{"location":"EmployeeProfileScreens/","page":"Employee Profile","title":"Employee Profile","text":"A detailed explanation of this part can be found at Miscellaneous - Navigation Buttons section.","category":"page"},{"location":"EmployeeProfileScreens/#EmployeeProfileInfo","page":"Employee Profile","title":"Employee Information","text":"","category":"section"},{"location":"EmployeeProfileScreens/","page":"Employee Profile","title":"Employee Profile","text":"(Image: image)","category":"page"},{"location":"EmployeeProfileScreens/","page":"Employee Profile","title":"Employee Profile","text":"The information displayed in this section comes from multiple sources. General data is retrieved from the varEmployeeDataRow global variable, while the scores are calculated from their respective tables. each label uses a conditional statement to display either a \"N/A\" or the actual value for the current Employee visibility. In the case of the picture we set a generic optumus_default png if no information is found: ","category":"page"},{"location":"EmployeeProfileScreens/","page":"Employee Profile","title":"Employee Profile","text":"If(!IsBlankOrError(varEmployeeDataRow.'Profile Picture'), \nvarEmployeeDataRow.'Profile Picture'.Full, \noptumus_default\n)","category":"page"},{"location":"EmployeeProfileScreens/","page":"Employee Profile","title":"Employee Profile","text":"The small Edit button navigates the user to update the Employee profile. ","category":"page"},{"location":"EmployeeProfileScreens/#Download-profile-picture","page":"Employee Profile","title":"Download profile picture","text":"","category":"section"},{"location":"EmployeeProfileScreens/","page":"Employee Profile","title":"Employee Profile","text":"To download the profile picture, the user can click on the photo and it will copy a base64 url containing the image to the user's PC clipboard. I suggested to Employee Care to paste this URL onto the browser, and then download the picture. The OnSelect property of the picture executes the following: ","category":"page"},{"location":"EmployeeProfileScreens/","page":"Employee Profile","title":"Employee Profile","text":"Copy(Substitute(JSON(Self.Image,JSONFormat.IncludeBinaryData),Char(34),\"\"));\nNotify(\"URL Correctly retrieved, please paste on your browser to download picture\",NotificationType.Success)","category":"page"},{"location":"EmployeeProfileScreens/","page":"Employee Profile","title":"Employee Profile","text":"note: Note\nI realize this is a convoluted method for downloading a picture, but as of Fall 2024, it’s not currently possible to execute a \"Download\" or \"Run\" command on base64 URLs provided by \"Image\" type columns to directly download or open them in the local browser, unlike with an attachments-type column. I'm unsure whether using DataVerse (a paid option) would simplify this process.","category":"page"},{"location":"EmployeeProfileScreens/#Score-Calculation","page":"Employee Profile","title":"Score Calculation","text":"","category":"section"},{"location":"EmployeeProfileScreens/","page":"Employee Profile","title":"Employee Profile","text":"There are three score fields in this section: S&E Score, Employer Satisfaction Score, and Job Satisfaction Score, for which we have the SEAverage, optumusAverage and satisfiedAverage variables, respectively. The procedure for calculating these scores follows the standard average formula: the total score entries for the current employee are summed and divided by the total number of rows in the table. ","category":"page"},{"location":"EmployeeProfileScreens/","page":"Employee Profile","title":"Employee Profile","text":"ClearCollect(SERevs,Filter('OPT - Employees SE Reviews', 'User System ID'=varEmployeeDataRow.'User System ID'));\nSet(totalSumSE,\n    CountRows(SERevs)\n);\nSet(SEAverage,\n    If(totalSumSE = 0, 0,Sum(SERevs,Value(Score))/totalSumSE)\n);","category":"page"},{"location":"EmployeeProfileScreens/","page":"Employee Profile","title":"Employee Profile","text":"An analogous procedure is followed for the optumusAverage and satisfiedAverage scores, but in these cases using the 'OPT - Employee Care One On Ones' table with the 'Optumus Satisfaction Score' and 'Satisfied Score' columns.","category":"page"},{"location":"EmployeeProfileScreens/#Additional-Employee-Information","page":"Employee Profile","title":"Additional Employee Information","text":"","category":"section"},{"location":"EmployeeProfileForm/#EmployeeProfileForm","page":"Employee Profile Form","title":"Employee Profile Form","text":"","category":"section"},{"location":"EmployeeProfileForm/","page":"Employee Profile Form","title":"Employee Profile Form","text":"(Image: image) This screen can be accessed from the Employee Profile section. While it functions similarly to a regular Form item which submits updates to the 'OPT - Employees Informations' table, it contains specific functionalities worth highlighting. ","category":"page"},{"location":"EmployeeProfileForm/#Profile-Picture","page":"Employee Profile Form","title":"Profile Picture","text":"","category":"section"},{"location":"EmployeeProfileForm/","page":"Employee Profile Form","title":"Employee Profile Form","text":"The image field type is automatically added from the PowerApps form layout. Keep in mind that the image is stored as a Base64 url, so to display it outside the forms and PowerApps environment it is necessary to decode the string. ","category":"page"},{"location":"EmployeeProfileForm/#Signature","page":"Employee Profile Form","title":"Signature","text":"","category":"section"},{"location":"EmployeeProfileForm/","page":"Employee Profile Form","title":"Employee Profile Form","text":"In the 'OPT - Employees Informations' table, the column signature is of type text, and we intend to store a Base64 String that contains signature information. The Edit/Cancel button controls the state of the variable editSignatureEmployee for different visibilities, and it also sets the signature string to Blank() or new value if a change is registered.","category":"page"},{"location":"EmployeeProfileForm/","page":"Employee Profile Form","title":"Employee Profile Form","text":"Set(varSignatureEmployee,Blank());\nSet(editSignatureEmployee,true)","category":"page"},{"location":"EmployeeProfileForm/","page":"Employee Profile Form","title":"Employee Profile Form","text":"There are two visibilities. The first displays when either editSignatureEmployee is set true or if there is no signature on file: ","category":"page"},{"location":"EmployeeProfileForm/","page":"Employee Profile Form","title":"Employee Profile Form","text":"(Image: image)","category":"page"},{"location":"EmployeeProfileForm/","page":"Employee Profile Form","title":"Employee Profile Form","text":"What we have here is only a Pen Input component which will input the data from the users, and from which the varSignatureEmployee will get its value. The image information is codified when submiting the form: ","category":"page"},{"location":"EmployeeProfileForm/","page":"Employee Profile Form","title":"Employee Profile Form","text":" If(\n        IsBlank(varSignatureEmployee),\n        Set(\n            varSignatureEmployee,\n            Substitute(\n                JSON(\n                    SignInput.Image,\n                    JSONFormat.IncludeBinaryData\n                ),\n                Char(34),\n                \"\"\n            )\n        )\n    );","category":"page"},{"location":"EmployeeProfileForm/","page":"Employee Profile Form","title":"Employee Profile Form","text":"This varSignatureEmployee is what controls the value to push in the table. When a signature is found in file the user will have this visibility: ","category":"page"},{"location":"EmployeeProfileForm/","page":"Employee Profile Form","title":"Employee Profile Form","text":"(Image: image)","category":"page"},{"location":"EmployeeProfileForm/","page":"Employee Profile Form","title":"Employee Profile Form","text":"This component is a simple image object which can decode the Base64 url we previously set with no additional steps. ","category":"page"},{"location":"EmployeeProfileForm/#Update-Button","page":"Employee Profile Form","title":"Update Button","text":"","category":"section"},{"location":"EmployeeProfileForm/","page":"Employee Profile Form","title":"Employee Profile Form","text":"This button controls the behavior of the form for submission. It also sends out probation notifications if the conditions are met. Luis added an update to update Inventory assets on the 'INM - Assets Log' table. ","category":"page"},{"location":"EmployeeProfileForm/#OnSuccess-Property","page":"Employee Profile Form","title":"OnSuccess Property","text":"","category":"section"},{"location":"EmployeeProfileForm/","page":"Employee Profile Form","title":"Employee Profile Form","text":"After a successful submission, this property sends out notifications of EC Advocate updates to the employee, and refreshes the varEmployeeDatarow variable with most up to date information: ","category":"page"},{"location":"EmployeeProfileForm/","page":"Employee Profile Form","title":"Employee Profile Form","text":"\n//Sends notification if new Advocate\nIf(DropdownECAdvocate.Selected.Value <> varEmployeeDataRow.'Employee Care Advocate',\nPatch('OPT - Employee Advocate Notification',\n    Defaults('OPT - Employee Advocate Notification'),\n\n    {   \n        Advocate:DropdownECAdvocate.Selected.Value,\n        Subject:\"New EC Advocate has been assigned\",\n        Receipients:varEmployeeDataRow.'Email Address',\n        Body:varEmployeeDataRow.Name\n    }\n\n));\n\n//Refresh varEmployeeDataRow variable\nSet(varEmployeeDataRow, LookUp('OPT - Employees Informations', 'User System ID'=varEmployeeDataRow.'User System ID'));","category":"page"},{"location":"AdministrationScreen/#AdminScr","page":"Administration","title":"Administration","text":"","category":"section"},{"location":"AdministrationScreen/#HolidaysScr","page":"Administration","title":"Holidays","text":"","category":"section"},{"location":"#Employee-Care-Anywhere-Documentation","page":"Home","title":"Employee Care Anywhere Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This page showcases the various elements and features presented on Employee Care Anywhere Application. The database schema can be consulted on this external lucidchart diagram.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This was my first, and probably largest, PowerApps project, so some sections may be more optimized than others. I decided to categorize the database into four main types: Employees, Clients, Tickets and Administrative. So far, the Employees and Tickets sections are the most complex, as they also rely on PowerAutomate flows to function.","category":"page"},{"location":"","page":"Home","title":"Home","text":"note: Note\nAll of this documentation is my own work, but I used AI tools such as ChatGPT to reword a few sentences, check grammar, and make everything easier to read. Francisco Hernandez","category":"page"},{"location":"MainScreen/#MainAppScr","page":"Main Screen","title":"Main Screen","text":"","category":"section"},{"location":"MainScreen/","page":"Main Screen","title":"Main Screen","text":"The main screen, named \"scrDashboard\" in the Tree View of PowerApps, is presented here: ","category":"page"},{"location":"MainScreen/","page":"Main Screen","title":"Main Screen","text":"(Image: image)","category":"page"},{"location":"MainScreen/","page":"Main Screen","title":"Main Screen","text":"There are different visibilities that can be accessed using the buttons labeled \"Employee User\", \"Integration User\", etc., which are used to test different levels of access to the functionalities of the application. The visibility on the screenshot above corresponds to what a user in \"Dev\" mode observes. ","category":"page"},{"location":"MainScreen/","page":"Main Screen","title":"Main Screen","text":"Set(UserRoleGlobal,\"Employee\");\nSet(UserRole,\"Employee\");\nUpdateContext({UserRole:\"Employee\"});","category":"page"},{"location":"MainScreen/","page":"Main Screen","title":"Main Screen","text":"Immediately after the application starts, the code in the \"OnVisible\" property of the window will be executed, followed by pieces of code in hidden elements. The most important pieces of code are discussed here. ","category":"page"},{"location":"MainScreen/","page":"Main Screen","title":"Main Screen","text":"OnVisible Property:","category":"page"},{"location":"MainScreen/","page":"Main Screen","title":"Main Screen","text":"Set(\n    userMail,\n    If(\n         IsBlank(LookUp(\n        'OPT - Employees Informations',\n        'User System ID' = Text(User().EntraObjectId))),\n        \n        LookUp(\n        'OPT - Employees Informations',\n        'Email Address 2' = User().Email).'Email Address',\n\n\n         LookUp(\n        'OPT - Employees Informations',\n        'User System ID' = Text(User().EntraObjectId)).'Email Address'\n\n    )\n    \n);\nSet(\n    UserRole1,\n    If(\n        IsBlank(\n            LookUp(\n                'OPT - Admin Schemas',\n                'Email Address' = userMail\n            ).Role\n        ),\n        LookUp(\n            'OPT - Admin Schemas',\n            'Email Address 2' = userMail\n        ).Role,\n        LookUp(\n            'OPT - Admin Schemas',\n            'Email Address' = userMail\n        ).Role\n    )\n);\nSet(\n    UserRole,\n    UserRole1\n);\nSet(\n    UserRoleGlobal,\n    UserRole1\n);\nUpdateContext({UserRole: UserRole1});\nSet(\n    userInfo,\n    LookUp(\n        'OPT - Employees Informations',\n        'Email Address' = userMail\n    )\n);","category":"page"},{"location":"MainScreen/","page":"Main Screen","title":"Main Screen","text":"User access to the application is based on the email address registered within the application. As I understand it, only users in the Optumus Active Directory should be able to access it. However, to add an extra layer of security, I ensure that the logged-in user is registered in both the 'OPT - Employees Information' and 'OPT - Admin Schemas' tables.","category":"page"},{"location":"MainScreen/","page":"Main Screen","title":"Main Screen","text":"The reason the UserRole variable was defined multiple times is that, during the initial development stages, I didn't fully understand how to pass global and context variables between windows. At some point, everything crashed when using the UserRole context variable, so it became necessary to define UserRoleGlobal to use as a single entity throughout the entire application.","category":"page"},{"location":"MainScreen/","page":"Main Screen","title":"Main Screen","text":"Proceed carefully if you plan to remove the other UserRole variables, as there may be some legacy instances where the global one might not work. For example, it currently doesn't work in the Attachment sections for some reason.","category":"page"},{"location":"MainScreen/","page":"Main Screen","title":"Main Screen","text":"An Unauthorized user will encounter the following screen: ","category":"page"},{"location":"MainScreen/","page":"Main Screen","title":"Main Screen","text":"(Image: image)","category":"page"},{"location":"MainScreen/","page":"Main Screen","title":"Main Screen","text":"This element is a container called \"UnauthorizedUser\", and it prevents an unauthorized agent to interact with the application. The Visible property of this contains this piece of code: ","category":"page"},{"location":"MainScreen/","page":"Main Screen","title":"Main Screen","text":"IsBlank(LookUp('OPT - Admin Schemas', 'Email Address'=User().Email)) And IsBlank(LookUp('OPT - Admin Schemas', 'Email Address 2'=User().Email)) ","category":"page"},{"location":"MainScreen/","page":"Main Screen","title":"Main Screen","text":"Additionally, PowerApps has an issue with deploying the most up-to-date versions of the application to users. When a new version is pushed, it is not guaranteed that all users will have the latest version unless they refresh their browser. To avoid conflicts, we deny access to anyone not using the correct version number. On the hidden \"TimerTrigger\" element, we run:","category":"page"},{"location":"MainScreen/","page":"Main Screen","title":"Main Screen","text":"If(\n\n    LookUp('OPT - Projects Versions Archive', 'Project Name'=\"Employee Care Anywhere\").\n    'Version Name'<>\"0.9.96\", Navigate(ScrVerError)\n);","category":"page"},{"location":"MainScreen/","page":"Main Screen","title":"Main Screen","text":"This code is deemed to be updated everytime a major version is released, and it's necessary to make the changes manually at both the application, and on the SharePoint List 'OPT - Projects Versions Archive'.","category":"page"},{"location":"MainScreen/","page":"Main Screen","title":"Main Screen","text":"Round Buttons","category":"page"},{"location":"MainScreen/","page":"Main Screen","title":"Main Screen","text":"(Image: image)","category":"page"},{"location":"MainScreen/","page":"Main Screen","title":"Main Screen","text":"These buttons are designed within a container structure that includes the icon, label, and two additional buttons to create a shadowing effect when the pointer hovers over them. Typically, these buttons navigate users to different sections of the application.","category":"page"},{"location":"MainScreen/","page":"Main Screen","title":"Main Screen","text":"Navigate(scrTicketDashboardClient,ScreenTransition.Fade)","category":"page"},{"location":"MainScreen/","page":"Main Screen","title":"Main Screen","text":"When a button is not displayed in the regular blue color, it indicates that there are pending tasks to complete. In the picture above, the \"Profile\" button is orange, signaling that the user has pending documents to sign. Instead of directing the user to their profile information, the button will take them to the \"Documents to Sign\" section.","category":"page"},{"location":"MainScreen/","page":"Main Screen","title":"Main Screen","text":"The coloring of these buttons is controlled on the \"Fill\" property of the button object:","category":"page"},{"location":"MainScreen/","page":"Main Screen","title":"Main Screen","text":"If(\n    !IsEmpty(docsVarMainScr),\n    RGBA(249, 85, 4, 1),\n    RGBA(48, 75, 106, 1)\n    )","category":"page"},{"location":"MainScreen/","page":"Main Screen","title":"Main Screen","text":"The \"docsVarMainScr\", and the rest of variables controlling these buttons, are defined in the \"TimerTrigger\" element discussed below.","category":"page"},{"location":"MainScreen/","page":"Main Screen","title":"Main Screen","text":"TimeTrigger Element","category":"page"},{"location":"MainScreen/","page":"Main Screen","title":"Main Screen","text":"The \"TimerTrigger\" was included to avoid performance issues during the application's startup. We also observed that running a large snippet in the \"OnVisible\" property of a window can lead to unexpected behavior when handling large datasets.","category":"page"},{"location":"MainScreen/","page":"Main Screen","title":"Main Screen","text":"In this section, we define important variables, such as those controlling the behavior of buttons for Profile, Time-Off Requests, and Pending WUs. Additionally, we define the collection of users in the Active Directory and set the visibility condition to notify admins when no new holidays have been established.","category":"page"},{"location":"MainScreen/","page":"Main Screen","title":"Main Screen","text":"ClearCollect(\n    users365,\n    Office365Users.SearchUser(\n        {\n            searchTerm: \"\",\n            top: 999\n        }\n    )\n);","category":"page"}]
}
